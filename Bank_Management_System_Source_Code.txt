#include<stdio.h>
#include<stdlib.h>
struct personal
{
    char name[20];
    char nationality[10];
    int age;
    int phone_number;
};
struct address
{
    char housenum[20];
    char locality[20];
    char city[20];
    char state[20];
    int pincode;
};
struct bank
{
    int account_number;
    int pin;
    struct personal per;
    struct address addr;
    float balance;
};
int checkAccNum(void);
int checkPassword(struct bank*);
void perform(struct bank*);
void read(struct bank*);
void recordData();
void update(struct bank*);
void delete(struct bank*);
void showDetails();
void transferMoney(int);
void blue(void);
void red(void);
void yellow(void);
void black(void);
FILE* fp;
int tempan;
int tempp;
float amount;
char n[20];
void main()
{
    fp=fopen("Bank_Accounts_Record.txt","a");
    if(fp==NULL)
    {
        red();
        printf("Unable to open Bank Records File\n");
        exit(0);
    }
    fclose(fp);
    int choice, id;
    struct bank* account;
    account=(struct bank*) malloc(sizeof(struct bank));
    if(account==NULL)
    {
        red();
        printf("Memory Allocation Failed\n");
        exit(0);
    }
    blue();
    printf("WELCOME TO BANKING SERVICES\n");
    do 
    {
        red();
        printf("MAIN-MENU\n");
        yellow();
        printf("1. Add Account\n");
        printf("2. Avail Services for existing accounts\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        black();
        scanf("%d", &choice);
        switch (choice) 
        {
            case 1:yellow();
                   printf("Enter an account number of your choice\n");
                   scanf("%d",&tempan);
                   int res=checkAccNum();
                   if(res==0)
                   {
                    printf("Enter a four digit pin for your account %d\n",tempan);
                    scanf("%d",&tempp);
                    recordData();
                    fclose(fp);
                   }
                   else
                   {
                    red();
                    printf("Account Number is already used\n");
                    printf("Please chose a different one\n");
                   }
                   break;
            case 2:yellow();
                   printf("Enter the account number\n");
                   scanf("%d",&tempan);
                   res=checkAccNum();
                   if(res==0)
                   {
                    red();
                    printf("Account not found\n");
                   }
                   else
                   {
                    printf("Enter pin\n");
                    scanf("%d",&tempp);
                    res=checkPassword(account);
                    if(res==0)
                    {
                        red();
                        printf("Incorrect Password\n");
                    }
                    else
                    {
                        perform(account);   
                    }
                   }
                   break;
            case 3:yellow();
                   printf("Thank You\n");
                   break;
            default:red();
                    printf("Invalid Choice\n");              
        }
    }while(choice!=3);           
}
int checkAccNum()
{
    fp=fopen("Bank_Accounts_Record.txt","r");
    if(fp==NULL)
    {
        red();
        printf("Unable to open Bank Records File\n");
        exit(0);
    }
    int found=0;
    struct bank* acc;
    acc=(struct bank*) malloc(sizeof(struct bank));
    if(acc==NULL)
    {
        printf("Memory Allocation failed\n");
        exit(0);
    }
    while(!feof(fp))
    {
        read(acc);
        if(acc->account_number==tempan)
        {
            found++;
            break;
        }
    }
    fclose(fp);
    return(found);
}
int checkPassword(struct bank* p)
{
    fp=fopen("Bank_Accounts_Record.txt","r");
    int match=0;
    while(!feof(fp))
    {
        read(p);
        if(p->account_number==tempan&&p->pin==tempp)
        {
            match++;
            break;
        }
    }
    fclose(fp);
    return(match);
}
void perform(struct bank* acc)
{
    float amt,tempb;
    int choice, temppin, confirm,acct;
    do 
    {
        red();
        printf("Sub-MENU\n");
        yellow();
        printf("1. Check Balance\n");
        printf("2. Deposit Money\n");
        printf("3. Withdraw Money\n");
        printf("4. Change Pin\n");
        printf("5. Check Account Details\n");
        printf("6. Update Account Details\n");
        printf("7.Transfer Money to another account within the bank\n");
        printf("8. Delete Account\n");
        printf("9. Exit\n");
        printf("Enter your choice: ");
        black();
        scanf("%d", &choice);
        switch (choice)
        {
            case 1:yellow();
                   printf("Name: %s\n",acc->per.name);
                   printf("Account Number: %d\n",acc->account_number);
                   printf("Balance: %f\n",acc->balance);
                   break;
            case 2:yellow();
                   printf("Enter amount you want to deposit\n");
                   scanf("%f",&amt);
                   acc->balance+=amt;
                   update(acc);
                   blue();
                   printf("Balance successfully updated\n");
                   break;
            case 3:yellow();
                   printf("Enter amount you want to withdraw\n");
                   scanf("%f",&amt);
                   tempb=acc->balance-amt;
                   if(tempb>=500)
                   {
                    acc->balance-=amt;
                    update(acc);
                    blue();
                    printf("Balance successfully updated\n");
                   }
                   else
                   {
                    red();
                    printf("Amount cannot be withdrawn as minimum balance of rupees 500 should be maintained\n");
                   }
                   break;
            case 4:yellow();
                   printf("Enter new four digit pin\n");
                   scanf("%d",&temppin);
                   acc->pin=temppin;
                   update(acc);
                   blue();
                   printf("Pin Successfully Updated\n");
                   break; 
            case 5:showDetails();
                   break;       
            case 6:yellow();
                   printf("Enter 1 if you want to update mobile number\n");
                   printf("Enter 2 if you want to update Address Details\n");
                   scanf("%d",&confirm);
                   if(confirm==1)
                   {
                    printf("Enter Mobile Number\n");
                    scanf("%d",&acc->per.phone_number);
                    update(acc);
                    blue();
                    printf("Mobile Number Successfully Updated\n");
                   }
                   else if(confirm==2)
                   {
                    printf("Enter house number\n");
                    scanf("%s",acc->addr.housenum);
                    printf("Enter Locality\n");
                    scanf("%s",acc->addr.locality);
                    printf("Enter City\n");
                    scanf("%s",acc->addr.city);
                    printf("Enter state\n");
                    scanf("%s",acc->addr.state);
                    printf("Enter Pin Code\n");
                    scanf("%d",&acc->addr.pincode);
                    update(acc);
                    blue();
                    printf("Address Details Successfully Updated\n");
                   }
                   else
                   {
                    red();
                    printf("Invalid Option\n");
                   }
                   break;
            case 7:printf("Enter the account to which you want to transfer Money To\n");
                   scanf("%d",&tempan);
                   int res=checkAccNum();
                   if(res==0)
                   {
                    red();
                    printf("Account not found\n");
                   }       
                   else
                   {
                    yellow();
                    printf("Enter amount you want to tranfer\n");
                    scanf("%f",&amt);
                    tempb=acc->balance-amt;
                   if(tempb>=500)
                   {
                    acc->balance-=amt;
                    update(acc);
                    transferMoney(amt);
                    blue();
                    printf("Amount Sucessfully Transferred\n");
                   }
                   else
                   {
                    red();
                    printf("Amount cannot be withdrawn as minimum balance of rupees 500 should be maintained\n");
                   }
                   }
                   break;
            case 8:yellow();
                   printf("Are you sure you want to delete your account\n");
                   printf("Enter 1 if you are sure or 0\n");
                   scanf("%d",&confirm);
                   if(confirm==1)
                   {
                    delete(acc);
                    blue();
                    printf("Account Successfully Deleted\n");
                    exit(0);
                   }
                   break;        
            case 9:black();
                   printf("Going back to main menu\n");
                   break;
            default:red();
                    printf("Invalid Choice\n");              
        }
    }while(choice!=9);
}
void read(struct bank* a)
{
    fscanf(fp,"Account Number: %d\nPin: %d\n",&a->account_number,&a->pin);
    fscanf(fp,"Name: %s\nAge: %d\n",a->per.name,&a->per.age);
    fscanf(fp,"Nationality: %s\nMobile: %d\n",a->per.nationality,&a->per.phone_number);
    fscanf(fp,"H.No: %s\nLocality: %s\n",a->addr.housenum,a->addr.locality);
    fscanf(fp,"City: %s\nState: %s\n",a->addr.city,a->addr.state);
    fscanf(fp,"Pin_Code: %d\n",&a->addr.pincode);
    fscanf(fp,"Balance: %f\n",&a->balance);   
}
void recordData()
{
    struct bank* details;
    details=(struct bank*) malloc(sizeof(struct bank));
    yellow();
    details->account_number=tempan;
    details->pin=tempp;
    printf("Enter Your Name\n");
    scanf("%s",details->per.name);
    printf("Entr your age\n");
    scanf("%d",&details->per.age);
    printf("Enter Your Nationality:\n");
    scanf("%s",details->per.nationality);
    printf("Enter Your mobile Number\n");
    scanf("%d",&details->per.phone_number);
    printf("Enter Address Details\n");
    printf("Enter house number\n");
    scanf("%s",details->addr.housenum);
    printf("Enter Locality\n");
    scanf("%s",details->addr.locality);
    printf("Enter City\n");
    scanf("%s",details->addr.city);
    printf("Enter state\n");
    scanf("%s",details->addr.state);
    printf("Enter Pin Code\n");
    scanf("%d",&details->addr.pincode);
L1: printf("Minium Deposit is Rupees 500\n");
    printf("Enter Amount you want to deposit\n");
    scanf("%f",&details->balance);
    if(details->balance>=500)
    {
        fp=fopen("Bank_Accounts_Record.txt","a");
        fprintf(fp,"Account Number: %d\nPin: %d\n",details->account_number,details->pin);
        fprintf(fp,"Name: %s\nAge: %d\n",details->per.name,details->per.age);
        fprintf(fp,"Nationality: %s\nMobile: %d\n",details->per.nationality,details->per.phone_number);
        fprintf(fp,"H.No: %s\nLocality: %s\n",details->addr.housenum,details->addr.locality);
        fprintf(fp,"City: %s\nState: %s\n",details->addr.city,details->addr.state);
        fprintf(fp,"Pin_Code: %d\n",details->addr.pincode);
        fprintf(fp,"Balance: %f\n",details->balance);   
    }
    else
    {
        red();
        goto L1;
    }
}
void update(struct bank* acc)
{
    struct bank* ban;   
    ban=(struct bank*) malloc(sizeof(struct bank));
    fp=fopen("Bank_Accounts_Record.txt","r");
    if(fp==NULL)
    {
        red();
        printf("Unable to open Bank Records File\n");
        exit(0);
    }
    FILE* fp1;
    fp1=fopen("tempbank.txt","w");
    while(!feof(fp))
    {
        read(ban);
        if(ban->account_number==acc->account_number)
        {
            fprintf(fp1,"Account Number: %d\nPin: %d\n",acc->account_number,acc->pin);
            fprintf(fp1,"Name: %s\nAge: %d\n",acc->per.name,acc->per.age);
            fprintf(fp1,"Nationality: %s\nMobile: %d\n",acc->per.nationality,acc->per.phone_number);
            fprintf(fp1,"H.No: %s\nLocality: %s\n",acc->addr.housenum,acc->addr.locality);
            fprintf(fp1,"City: %s\nState: %s\n",acc->addr.city,acc->addr.state);
            fprintf(fp1,"Pin_Code: %d\n",acc->addr.pincode);
            fprintf(fp1,"Balance: %f\n",acc->balance);         
        }
        else
        {
            fprintf(fp1,"Account Number: %d\nPin: %d\n",ban->account_number,ban->pin);
            fprintf(fp1,"Name: %s\nAge: %d\n",ban->per.name,ban->per.age);
            fprintf(fp1,"Nationality: %s\nMobile: %d\n",ban->per.nationality,ban->per.phone_number);
            fprintf(fp1,"H.No: %s\nLocality: %s\n",ban->addr.housenum,ban->addr.locality);
            fprintf(fp1,"City: %s\nState: %s\n",ban->addr.city,ban->addr.state);
            fprintf(fp1,"Pin_Code: %d\n",ban->addr.pincode);
            fprintf(fp1,"Balance: %f\n",ban->balance);   
        }
    }
    fclose(fp);
    fclose(fp1);
    remove("Bank_Accounts_Record.txt");
    fp=fopen("Bank_Accounts_Record.txt","w");
    fp1=fopen("tempbank.txt","r");
    char ch=fgetc(fp1);
    while(ch!=EOF)
    {
        fputc(ch,fp);
        ch=fgetc(fp1);
    }
    fclose(fp);
    fclose(fp1);
    remove("tempbank.txt");
}
void delete(struct bank* acc)
{
    struct bank* ban;   
    ban=(struct bank*) malloc(sizeof(struct bank));
    fp=fopen("Bank_Accounts_Record.txt","r");
    FILE* fp1;
    fp1=fopen("tempbank1.txt","w");
    while(!feof(fp))
    {
        read(ban);
        if(ban->account_number!=acc->account_number)
        {
            fprintf(fp1,"Account Number: %d\nPin: %d\n",ban->account_number,ban->pin);
            fprintf(fp1,"Name: %s\nAge: %d\n",ban->per.name,ban->per.age);
            fprintf(fp1,"Nationality: %s\nMobile: %d\n",ban->per.nationality,ban->per.phone_number);
            fprintf(fp1,"H.No: %s\nLocality: %s\n",ban->addr.housenum,ban->addr.locality);
            fprintf(fp1,"City: %s\nState: %s\n",ban->addr.city,ban->addr.state);
            fprintf(fp1,"Pin_Code: %d\n",ban->addr.pincode);
            fprintf(fp1,"Balance: %f\n",ban->balance);               
        }
    }
    fclose(fp);
    fclose(fp1);
    remove("Bank_Accounts_Record.txt");
    fp=fopen("Bank_Accounts_Record.txt","w");
    fp1=fopen("tempbank1.txt","r");
    char ch=fgetc(fp1);
    while(ch!=EOF)
    {
        fputc(ch,fp);
        ch=fgetc(fp1);
    }
    fclose(fp);
    fclose(fp1);
    remove("tempbank1.txt");
}
void showDetails()
{
    struct bank* show;
    show=(struct bank*) malloc(sizeof(struct bank));
    fp=fopen("Bank_Accounts_Record.txt","r");
    if(fp==NULL)
    {
        red();
        printf("Unable to open Bank Records File\n");
        exit(0);
    }
    while(!feof(fp))
    {
        read(show);
        if(show->account_number==tempan&&show->pin==tempp)
        {
            blue();
            printf("Account Found\n");
            printf("Account NUmber: %d\n",show->account_number);
            yellow();
            printf("Personal Details\n");
            printf("Name: %s\n",show->per.name);
            printf("Age: %d\n",show->per.age);
            printf("Nationality: %s\n",show->per.nationality);
            printf("Mobile Number: %d\n",show->per.phone_number);
            black();
            printf("Address Details\n");
            printf("House Number: %s\n",show->addr.housenum);
            printf("Locality: %s\n",show->addr.locality);
            printf("City: %s\n",show->addr.city);
            printf("State: %s\n",show->addr.state);
            printf("Pin Code: %d\n",show->addr.pincode);
            red();
            printf("Balance: %f\n",show->balance);
            break;
        }
    }
}
void transferMoney(int amt)
{
    struct bank* ban;   
    ban=(struct bank*) malloc(sizeof(struct bank));
    fp=fopen("Bank_Accounts_Record.txt","r");
    if(fp==NULL)
    {
        red();
        printf("Unable to open Bank Records File\n");
        exit(0);
    }
    FILE* fp1;
    fp1=fopen("tempbank.txt","w");
    while(!feof(fp))
    {
        read(ban);
        if(ban->account_number==tempan)
        {
            fprintf(fp1,"Account Number: %d\nPin: %d\n",ban->account_number,ban->pin);
            fprintf(fp1,"Name: %s\nAge: %d\n",ban->per.name,ban->per.age);
            fprintf(fp1,"Nationality: %s\nMobile: %d\n",ban->per.nationality,ban->per.phone_number);
            fprintf(fp1,"H.No: %s\nLocality: %s\n",ban->addr.housenum,ban->addr.locality);
            fprintf(fp1,"City: %s\nState: %s\n",ban->addr.city,ban->addr.state);
            fprintf(fp1,"Pin_Code: %d\n",ban->addr.pincode);
            fprintf(fp1,"Balance: %f\n",(ban->balance+amt));         
        }
        else
        {
            fprintf(fp1,"Account Number: %d\nPin: %d\n",ban->account_number,ban->pin);
            fprintf(fp1,"Name: %s\nAge: %d\n",ban->per.name,ban->per.age);
            fprintf(fp1,"Nationality: %s\nMobile: %d\n",ban->per.nationality,ban->per.phone_number);
            fprintf(fp1,"H.No: %s\nLocality: %s\n",ban->addr.housenum,ban->addr.locality);
            fprintf(fp1,"City: %s\nState: %s\n",ban->addr.city,ban->addr.state);
            fprintf(fp1,"Pin_Code: %d\n",ban->addr.pincode);
            fprintf(fp1,"Balance: %f\n",ban->balance);   
        }
    }
    fclose(fp);
    fclose(fp1);
    remove("Bank_Accounts_Record.txt");
    fp=fopen("Bank_Accounts_Record.txt","w");
    fp1=fopen("tempbank.txt","r");
    char ch=fgetc(fp1);
    while(ch!=EOF)
    {
        fputc(ch,fp);
        ch=fgetc(fp1);
    }
    fclose(fp);
    fclose(fp1);
    remove("tempbank.txt");   
}
void blue()
{
    printf("\033[0;34m");
}
void red()
{
    printf("\033[1;31m");
}
void yellow()
{
    printf("\033[0;33m");
}
void black()
{
    printf("\033[0;37m");
}